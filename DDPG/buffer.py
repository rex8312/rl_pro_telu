import gymimport quanser_robotsimport mathimport randomimport numpy as npimport matplotlibimport matplotlib.pyplot as pltfrom collections import namedtuplefrom itertools import countfrom PIL import Imageimport torchimport torch.nn as nnimport torch.optim as optimimport torch.nn.functional as Fimport torchvision.transforms as Tenv = gym.make('Levitation-v0')Transition = namedtuple('Transition', ('state', 'action', 'nextState', 'reward'))class ReplayBuffer(object):    def __init__(self, capacity):        self.capacity = capacity        self.buffer = []        self.position = 0    def push(self, *args):        if len(self.buffer) < self.capacity:            self.buffer.append(None)        self.buffer[self.position] = Transition(*args)        self.position = (self.position + 1) % self.capacity    def sample(self, batch_size):        return random.sample(self.buffer, batch_size)    def __len__(self):        return len(self.buffer)